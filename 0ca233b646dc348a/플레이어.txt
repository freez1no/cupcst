플레이어/아이템/결승점

tag: Player 추가 ,Item추가
Layer: Player 와 PlayerDamaged 추가 **레이어 번호 확인**

0. Main Camera 플레이어에 집어넣기 좌표 설정 (0,0,-10)
1. Capsule Collider 2D
2. Rigidbody 2D -> Z축 고정
3. 애니메이터(parameters -> 'isWalking'Bool 생성)
- Player_Jump(Loop Time 해제)(parameters -> 'isJumping'Bool 생성)
- any state -> Damaged ->(loop 해제) exit
- trriger 추가 (doDamaged)
4. Player Move 스크립트
5. Project setting -> Physics 2D에서 중력 값 설정 가능
6.결승점 태그 Finish로 설정

 
public class PlayerMove : MonoBehaviour
{
	public GameManager gameManager;
	public float maxSpeed;
	public float jumpPower;

	Rigidbody2D rigid;
	SpriteRenderer spriteRenderer;
	Animator anim;
	CapsuleCollider2D capsuleCollider;

	void Awake()
	{
		rigid = GetComponent<Rigidbody2D>();
		spriteRenderer = GetComponent<SpriteRenderer>();
		anim = GetComponent<Animator>();
	}

	void Update()
	{
		//점프
		if(Input.GetButton("Jump") && !anim.GetBool("isJumping")) {
			rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);
			anim.SetBool("isJumping",true);
		}
		
		//멈추는 속도
		if(Input.GetButtonUp("Horizontal")){
			rigid.velocity = new Vector2(rigid.velocity.normalized.x * 0.5f, rigid.velocity.y);
		}

		//방향전환
		if(Input.GetButton("Horizontal"))
			spriteRenderer.flipX = Input.GetAxisRaw("Horizontal") == -1;

		//애니메이션
		if(Mathf.Abs(rigid.velocity.x) < 0.3)
			anim.SetBool("isWalking", false);
		else
			anim.SetBool("isWalking", true);
	}

	void FixedUpdate()
	{
		//이동방법
		float h = Input.GetAxisRaw("Horizontal");
		rigid.AddForce(Vector2.right * h, ForceMode2D.Impulse);

		//최대속도
		if(rigid.velocity.x > maxSpeed) //오른쪽 최대 속도
			rigid.velocity = new Vector2(maxSpeed, rigid.velocity.y);
		else if(rigid.velocity.x < maxSpeed * (-1)) //왼쪽 최대 속도
			rigid.velocity = new Vector2(maxSpeed * (-1), rigid.velocity.y);


		//랜딩 플랫폼(레이케스트)
		if(rigid.velocity.y < 0){
			Debug.DrawRay(rigid.position, Vector3.down, new Color(0,1,0));
			RaycastHit2D rayHit =  Physics2D.Raycast(rigid.position, Vector3.down, 1, LayerMask.GetMask("Platform"));		
			if(rayHit.collider != null) {
				if(rayHit.distance < 0.5f)
					anim.SetBool("isJumping", false);
			}
		}
	}


	void OnCollisionEnter2D(Collision2D collision)
	{
		if(collision.gameObject.tag == "Enemy") {
			//공격
			if(rigid.velocity.y < 0 && transform.position.y > collision.transform.position.y){
				OnAttack(collision.transform);				
			}
			else //데미지
				OnDamaged(collision.transform.position);
		}

	}

	void OnTriggerEnter2D(Collider2D collision)
	{
		if (collision.gamObject.tag == "Item"){
			//포인트
			gmaeManager.stagePoint += 100;

			//아이템 사라짐
			collision.gameObject.SetActive(false);
		}
		else if (collision.gameObject.tag == "Finish") {
			//다음 스테이지
			gameManager.NextStage();
		}
	}

	void OnDamaged(Vector2 targetPos)
	{
		//피 다운
		gameManager.HealthDown();

		//레이어 바꿈
		gameObject.layer = 11; //playerdamaged 레이어번호 작성
	
		//투명화
		spriteRenderer.color = new Color (1, 1, 1, 0.4f);

		//반작용 튕귐
		int dirc = transform.position.x - targetPos.x > 0 ? 1 : -1;
		rigid.AddForce(new Vector2(dirc,1)*7 ,ForceMode2D.Impulse);
		
		//애니메이션
		anim.SetTrigger("doDamaged");

		Invoke("OffDamaged", 3);
	}

	void OnAttack(Transform enemy)
	{
		//포인트
		gmaeManager.stagePoint += 100;
		//리액션 포스
		rigid.AddForce(Vector2.up * 10, ForceMode2D.Impulse);

		//몬스터 죽음
		EnemyMove enemyMove = enemy.GetComponent<EnemyMove>();
		enemyMove.OnDamaged();
	}

	void OffDamaged()
	{
		gameObject.layer = 10;
		spriteRenderer.color = new Color(1,1,1,1);
	}

	void OnDie()
	{
		//스프라이트 알파
		spriteRenderer.color = new Color(1, 1, 1, 0.4f);

		//스프라이트 방향전환 y축
		spriteRenderer.flipY = true;

		//충동 비활성화
		capsuleCollider.enabled = false;

		//죽는 모션 점프
		rigid.AddForce(Vector2.up * 5, ForceMode2D.Impulse);

	}
	
	public void VelocityZero()
	{
		rigid.velocity = Vector2.zero;
	}

}